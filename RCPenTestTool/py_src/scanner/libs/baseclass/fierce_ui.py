from threading import Lock
from kivy.logger import Logger
from kivy.clock import Clock
from kivy.uix.screenmanager import Screen
from kivymd.uix.textfield import MDTextFieldRound
from shlex import split as split_cmd
from fierce import get_args_parser, parse_args, interrupt_event
from fierce import FierceFatalError, inject_logger
from fierce import fierce as fierce_entry
from scanner_share import WeakMethod, threaded


class NeedHelpForFierce(Exception):
    pass


class FierceScreen(Screen):

    log_lock = Lock()

    def on_enter(self, *args):
        # init fierce
        inject_logger(WeakMethod(self.log_to_log_field))
        self.cmd_parser = get_args_parser()
        self.cmd_parser.prog = 'fierce'
        self.cmd_parser.error = WeakMethod(self.error_handler)

        # init ui releated
        self.ids.cmd_field.bind(
            on_text_validate = self.on_validate_cmd
        )

    def on_leave(self, *args):
        interrupt_event.set()

    def on_validate_cmd(self, cmd_component):
        cmd = cmd_component.text
        cmd_component.text = ""
        self.execute_command(cmd)

        def re_focus_cmd(delay):
            cmd_component.focus = True
        Clock.schedule_once(re_focus_cmd)

    def log_to_log_field(self, message, *args, **kwargs):
        with self.log_lock:
            self.ids.log_field.text += '\n' + message
            self.ids.scroll_view.scroll_to(self.ids.bottom)

    def error_handler(self, message):
        self.log_to_log_field(message)
        raise NeedHelpForFierce()

    @threaded
    def execute_command(self, cmd):
        try:
            self.log_to_log_field("{}".format(cmd))
            Logger.info("Fierce: Executing {}".format(cmd))
            cmd_args = split_cmd(cmd)

            if len(cmd_args) < 1 or cmd_args[0] != "fierce":
                raise NeedHelpForFierce()

            if len(cmd_args) == 1 or '-h' in cmd_args or '--help' in cmd_args:
                raise NeedHelpForFierce()

            args = parse_args(self.cmd_parser, (cmd_args[1:]))
            fierce_entry(**vars(args))

        except NeedHelpForFierce:
            help_info = self.cmd_parser.format_help()
            self.log_to_log_field(help_info)
        except Exception as err:
            msg = "Fierce: Executing {} failed, error {}".format(cmd, err)
            Logger.error(msg)
            self.log_to_log_field(msg)
